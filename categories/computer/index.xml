<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computer on Bongjun Jang</title>
    <link>https://bongjunjang.com/categories/computer/</link>
    <description>Recent content in Computer on Bongjun Jang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <lastBuildDate>Mon, 29 Nov 2021 08:54:51 +0900</lastBuildDate><atom:link href="https://bongjunjang.com/categories/computer/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>액터 모델 실습</title>
      <link>https://bongjunjang.com/posts/actor-model-in-practice/</link>
      <pubDate>Mon, 29 Nov 2021 08:54:51 +0900</pubDate>
      
      <guid>https://bongjunjang.com/posts/actor-model-in-practice/</guid>
      <description>Elixir Programming Language
요즘 나의 프로그래밍 공부는 Elixir를 공부하는 데 치중되어 있다. Elixir는 강타입(Strongly typed), 동적타입(Dynamically typed), 함수형(Functional) 프로그래밍 언어다. 컴파일(elixirc) 뿐 아니라 인터랙티브 쉘(iex)과 스크립팅(exs)도 지원하기 때문에 함수형 언어인 것만 제외하면 파이썬이나 루비와 같은 스크립트 언어처럼 사용할 수 있다. 실제로 문법도 루비와 매우 흡사하기 때문에 파이썬이나 루비를 배웠던 사람이라면 큰 어려움없이 흡수할 수 있다.
함수형 언어에 한번 빠지니 다시 돌아가기가 너무 어렵다. Elixir 전에는 F#을 주로 썼는데 F#은 아쉬운 점이 많았다.</description>
    </item>
    
    <item>
      <title>쿠키런 킹덤 서버 아키텍처 3</title>
      <link>https://bongjunjang.com/posts/cookie-run-kingdom-server-architecture-3/</link>
      <pubDate>Tue, 31 Aug 2021 14:55:09 +0900</pubDate>
      
      <guid>https://bongjunjang.com/posts/cookie-run-kingdom-server-architecture-3/</guid>
      <description>세번쨰 주제에서 함수형 프로그래밍에 대한 이야기가 눈에 띈다. 영상에서 소개되는 &amp;lsquo;프로그램&amp;rsquo;이라는 개념은 함수형 프로그래밍의 &amp;lsquo;순수 함수&amp;rsquo;라는 개념과 동일하다. 또한 Scala의 DSL 기능이 보이는데, 어떻게 작동하는지 다시 살펴보자. 기억이 가물가물하다.
Pure Function(순수 함수) 함수가 순수하다는 말은 함수가 같은 입력에 대해서 항상 같은 결과값을 만들며, 부작용(side effect)이 없다는 뜻이다. 여기서 부작용이란 함수의 &amp;lsquo;보이지 않는 결과값&amp;rsquo;이라고 할 수 있는데, 함수 외부의 가변 변수를 수정한다든지, 시스템의 상태를 변경시킨다던지 하는 것들을 말한다. 순수 함수를 통해 우리는 함수가 오로지 입력과 결과값만을 통해 외부와 소통할 수 있음을 보장할 수 있다.</description>
    </item>
    
    <item>
      <title>쿠키런 킹덤 서버 아키텍처 2</title>
      <link>https://bongjunjang.com/posts/cookie-run-kingdom-server-architecture-2/</link>
      <pubDate>Mon, 30 Aug 2021 20:19:15 +0900</pubDate>
      
      <guid>https://bongjunjang.com/posts/cookie-run-kingdom-server-architecture-2/</guid>
      <description>이번 포스트에서 다룰 내용은 CRUD와 Event Sourcing이다. 이 주제는 데이터를 다루는 방법에 대한 이야기다.
가장 간단한 예로 은행 계좌를 관리하는 어플리케이션을 생각해보자. 은행 계좌는 잔액를 관리해야하며 계좌 간의 송금 기능을 구현해야 한다. 이를 CRUD와 Event Sourcing으로 각각 구현해보자.
CRUD CRUD는 Create, Read, Update and Delete의 약어로 데이터를 생성하고 읽고 수정하고 삭제하는 기능을 말한다. F#으로 CRUD를 나타내보면 다음과 같은 코드로 나타낼 수 있을 것이다.
// 1. Create let mutable account = BankAccount(500) // 2.</description>
    </item>
    
    <item>
      <title>쿠키런 킹덤 서버 아키텍처 1</title>
      <link>https://bongjunjang.com/posts/cookie-run-kingdom-server-architecture-1/</link>
      <pubDate>Sun, 29 Aug 2021 12:37:24 +0900</pubDate>
      
      <guid>https://bongjunjang.com/posts/cookie-run-kingdom-server-architecture-1/</guid>
      <description>Actor Model에 대해서 정리하며 포스트를 쓰려다가 예전에 봤던 NDC21-프로그래밍, 쿠키런 킹덤 서버 아키텍처 뜯어먹기가 떠올라서 리뷰해보려고 한다. 서버 아키텍처에 대해 많은 내용을 배울 수 있는 자료라서 좋은 공부가 될 것 같다.
일단 영상의 주요 내용은 다음과 같다. (영상 1분 16초 참고)
Stateful vs. Stateless, and Actor Model CRUD vs. Event Sourcing 함수형 프로그래밍과 DSL로 콘텐츠 구현 유저간 상호 작용 구현하기: 2PC vs. SAGA 이벤트 기반 아키텍처를 바탕으로 확장하기 이번 포스트에서는 첫번째 내용을 다뤄보려고 한다.</description>
    </item>
    
    <item>
      <title>컴퓨터와 시간</title>
      <link>https://bongjunjang.com/posts/computer-and-time/</link>
      <pubDate>Sat, 28 Aug 2021 12:35:23 +0900</pubDate>
      
      <guid>https://bongjunjang.com/posts/computer-and-time/</guid>
      <description>거대한 시차 해외로 가는 비행기표를 찾아볼 때 우리는 우리의 표준시와 도착지의 표준시를 비교한다. 서울은 뉴욕보다 14시간 빠르다. 일광절약제가 적용되는 때에는 13시간 빠르다. 그래서 인천에서 출발할 때의 시각은 한국표준시로 읽고 뉴욕에 도착할 때의 시각은 동부시간대로 읽는다. 지구 상에 어디에 있든, 시간대는 아주 정확하게 구분되어 있고 일정한 간격으로 흘러가고 있다.
현대 사회에서 시각을 읽는 것은 아주 쉬운 일이다. 스마트 워치를 사용하거나, 스마트폰을 열거나 랩탑이나 데스크탑을 키면 1초단위로 시각을 아주 정확하게 보여준다. 콘서트 티케팅이나 대학 수강신청처럼 1초 단위로 희비가 갈리는 이벤트에 있어서도 다들 디지털 시계를 가지고 있기 때문에 티케팅 서버나 대학 서버 시각을 정확하게 맞춰서 접속할 수 있다.</description>
    </item>
    
  </channel>
</rss>
